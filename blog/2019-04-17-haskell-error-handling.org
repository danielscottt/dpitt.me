---
title: "Haskell Error Handling: Everything is Terrible"
back: true
---

#+TITLE: Haskell Error Handling: Everything is Terrible

** Preface

To start this post, I'd like to state a disclaimer: I am a novice
real-world Haskeller. My day-to-day work these days involves
[[https://dpitt.me/talks/pt-impression][translating fancy types in Rust to Agda]], and then proving things about
the resultant Agda code. That said, I've made various exploratory
attempts at doing this mechanically. My latest venture is to use
[[https://hackage.haskell.org/package/language-rust][~language-rust~]] to do the initial parsing, and then I take on
translating one AST to another.

This post isn't about that, though. It's about my struggle to find a
non-insanity-inducing way to deal with errors in a real, actual
Haskell program.

** The State of The Art

I spent nearly a day scouring the Web looking at various posts by
Haskellersâ€”on their blogs, on stack overflow, I even saw one show up
on the software engineering Stack Exchange site. Apparently, this is
such a miserable problem it requires a software engineering
principles-level discussion.

What I'd like do is to list a few of the things I read, drew
inspiration from, or ones from which I perhaps just gained some
philosophical wisdom. I'll talk about the good parts, the bad parts,
then ultimately cover why it wasn't quite satisfactory for how I'd
like for such a thing to work.

*** 1. [[https://www.fpcomplete.com/blog/2016/11/exceptions-best-practices-haskell][Exceptions Best Practices in Haskell (Snoyman)]]

This post is probably the premier exposition on the topic. My primary
takeaway here was regarding the cases where you do, and where you
/don't/, need to be parametric over the error or exception types. The
position taken in the post was that, well, you should always be
parametric on account of limitation imposed on a consumer of your
error-throwing code in terms of its composability. However, I found
that this perspective, the one borne from a desire for flexibility, a
bit too rigid. If it's the case that you're building a self-contained
application, a singular, top-level error type is perfectly reasonable.
